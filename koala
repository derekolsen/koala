#!/bin/bash
set -e

# Check for environment-informed chromium binary or otherwise set one
# This can be modified for your use case
[ -z "$chrome" ] && chrome="chromium"

streams=$PWD/streams
errfile="/dev/null"
destination_array=()
oneshot=false

_end() {
    # Inform console as to why we're terminating
    [[ -z $1 ]] && echo "Terminating normally" && exit 0
    [[ $1 == 1 ]] && echo -e "\e[31m'$2' is missing required value: $3\e[0m" && exit 1
    [[ $1 == 6 ]] && echo -e "\e[31mMissing required value: $2\e[0m" && exit 1
    [[ $1 == 2 ]] && echo -e "\e[31m'$2' contains a duplicate destination.\e[0m" && exit 2
    [[ $1 == 3 ]] && echo -e "\e[31mCould not find stream directory '${streams}'.\e[0m" && exit 3
    [[ $1 == 4 ]] && echo -e "\e[31mStream directory '${streams}' is empty.\e[0m" && exit 4
    [[ $1 == 5 ]] && echo -e "\e[31mStream file '$2' does not exist.\e[0m" && exit 5
}

_exit() {
    # Kill all child processes on exit
    jobs="$(jobs -p)"; [ -n "$jobs" ] && kill $jobs 2> $errfile
    tset
}

# Trap interrupts and exits
trap _end INT
trap _exit EXIT

usage() {
    cat << EOF
Usage: koala [OPTION ...]
A web scraper that sends UDP video over a local network
Options:
-v         --verbose                      show debug logs
-h         --help                         display this usage message and exit

-f FILE    --file FILE                    single-file mode, FILE should
                                          be a stream descriptor file
 
-o         --oneshot                      enables oneshot mode (one-liner),
                                          required for all following options

-d IP:PORT --dest, --destination IP:PORT  destination for UDP stream
-u URL     --url URL                      URL of webpage
-x WIDTH   --width WIDTH                  width in pixels
-y HEIGHT  --height HEIGHT                height in pixels
-c DEPTH   --colordepth DEPTH             colordepth (unstable)
-r RATE    --framerate RATE               framerate in FPS
-b RATE    --bitrate RATE                 bitrate in kilobits
EOF
}

default_env() {
    # Initialize sane defaults
    width=1920
    height=1080
    colordepth=24
    framerate=30
    bitrate=6000
}
default_env

# Get options
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
  -v | --verbose )
    errfile="/dev/stdout"
    ;;
  -f | --file )
    shift; file=$1
    [[ -f $file ]] || _end 5 $file
    ;;
  -o | --oneshot )
    oneshot=true
    ;;
  -d | --dest | --destination )
    shift; destination=$1
    ;;
  -u | --url )
    shift; url=$1
    ;;
  -x | --width )
    shift; width=$1
    ;;
  -y | --height )
    shift; height=$1
    ;;
  -c | --colordepth )
    shift; colordepth=$1
    ;;
  -r | --framerate )
    shift; framerate=$1
    ;;
  -b | --bitrate )
    shift; bitrate=$1
    ;;
  -h | --help )
    usage; exit
    ;;
esac; shift; done
if [[ "$1" == '--' ]]; then shift; fi

newline_fix() {
    # Add newline to stream file if needed
    if [ ! "$(tail -c1 "$1")" == "" ]; then
        echo "" >> "$1"
    fi
}

create_stream() {
    # Find an unused display server number
    local Xdisplay=1000
    while [ -f /tmp/.X${Xdisplay}-lock ]; do
        ((Xdisplay+=1))
    done

    # Parse config if provided
    if [[ -e "$1" ]]; then
        while read line; do
            # skip empty lines
            [ -z "$line" ] && continue
            # ignore comments
            [[ $line == \#* ]] && continue
            local "$line"
        done < "$1"
    fi

    # Check for required stream variables
    [[ -z "$name" ]] && [[ -n $1 ]] && _end 1 $1 name
    [[ -z "$url" ]] && [[ -n $1 ]] && _end 1 $1 url
    [[ -z "$destination" ]] && [[ -n $1 ]] && _end 1 $1 destination
    [[ -z "$url" ]] && [[ -z $1 ]] && _end 6 url
    [[ -z "$destination" ]] && [[ -z $1 ]] && _end 6 destination

    # Check for duplicate destinations
    for i in ${destination_array[@]}; do
        [ $i == $destination ] && _end 2 $1
    done
    destination_array+=($destination)

    # Create a new virtual X server
    Xvfb :${Xdisplay} -screen 0 ${width}x${height}x${colordepth} &
    # Wait for lockfile to generate before continuing (avoids race condition)
    until [ -f /tmp/.X${Xdisplay}-lock ]; do
        sleep .01s
    done

    # Start chromium
    DISPLAY=:$Xdisplay ${chrome} \
        --user-data-dir=$(mktemp -d) \
        --kiosk \
        --fullscreen \
        --window-position=0,0 \
        --window-size=${width},${height} \
        ${url} 2> $errfile &

    # Start ffmpeg
    ffmpeg \
        -video_size ${width}x${height} \
        -y \
        -r ${framerate} \
        -f x11grab \
        -draw_mouse 0 \
        -s ${width}x${height} \
        -i :${Xdisplay} \
        -b:v ${bitrate}k \
        -f mpegts \
        udp://${destination} 2> $errfile &

    # Console output
    if [[ -z "$1" ]]; then
        echo -e "Streaming to \e[34mudp://${destination}\e[0m @ \e[33m${width}x${height}x${colordepth}\e[0m (:${Xdisplay})"
    else
        echo -e "\e[36m[${name}]: \e[0mStreaming to \e[34mudp://${destination}\e[0m @ \e[33m${width}x${height}x${colordepth}\e[0m (:${Xdisplay})"
    fi
    echo -e "URL: \e[32m${url}\e[0m"
}

# Check if file is provided
if [[ -e "${file}" ]]; then
    newline_fix "$file"
    create_stream "$file"
elif $oneshot; then
    # Oneshot mode
    create_stream
else
    # Normal mode
    # Check if stream directory exists and is not empty
    [[ -d ${streams} ]] || _end 3
    [[ "$(ls ${streams})" ]] || _end 4

    # Run create_stream for each file in streams directory
    for stream in ${streams}/*; do
        newline_fix "$stream"
        default_env
        create_stream "$stream"
    done
fi

# Keep main process running
wait
